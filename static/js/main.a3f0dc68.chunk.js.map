{"version":3,"sources":["components/Form.js","components/Result.js","components/App.js","serviceWorker.js","index.js"],"names":["Form","props","react_default","a","createElement","className","onSubmit","submit","type","placeholder","value","onChange","inputChange","Result","_props$weather","weather","date","err","city","temp","feelTemp","wind","pressure","humdity","content","Fragment","concat","App","state","dateTime","handleInputChange","e","_this","setState","target","handleCitySubmit","preventDefault","API","fetch","then","response","ok","Error","json","data","console","log","time","Date","toLocaleString","_data$current","current","temp_c","feelslike_c","wind_kph","pressure_mb","humidity","is_day","prevState","dayTime","catch","this","condition","document","body","src_components_Form","src_components_Result","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a3f0dc68.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Form.css';\r\n\r\n\r\nconst Form = props => {\r\n    return (\r\n        <form className=\"submForm\" onSubmit={props.submit}>\r\n            <input\r\n                className=\"inpCity\"\r\n                type=\"text\"\r\n                placeholder=\"Wpisz miasto...\"\r\n                value={props.value}\r\n                onChange={props.inputChange}\r\n            />\r\n            <button className=\"btnSubm\">Sprawdź pogodę</button>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\nimport './Result.css'\r\n\r\nconst Result = props => {\r\n    const { date, err, city, temp, feelTemp, wind, pressure, humdity } = props.weather\r\n\r\n    let content = null\r\n\r\n    if (!err && city) {\r\n        content = (\r\n            <>\r\n                <h1 className=\"cityTitle\">Wyniki wyszukiwania dla: <span>{city}</span></h1>\r\n                <p>Dane dla dnia i godziny: <strong>{date}</strong></p>\r\n                <p>Temperatura: <strong>{temp}°C</strong></p>\r\n                <p>Temperatura odczuwalna: <strong>{feelTemp}°C</strong></p>\r\n                <p>Prędkość wiatru: <strong>{wind}km/h</strong></p>\r\n                <p>Ciśnienie atmosferyczne: <strong>{pressure}hPa</strong></p>\r\n                <p>Wilgotność powietrza: <strong>{humdity}%</strong></p>\r\n            </>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"result\">\r\n            {err ? `Brak w bazie ${city}` : content}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Result;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Form from './Form'\r\nimport Result from './Result'\r\n\r\nclass App extends Component {\r\n  state = {\r\n    value: \"\",\r\n    date: \"\",\r\n    city: \"\",\r\n    temp: \"\",\r\n    feelTemp: \"\",\r\n    wind: \"\",\r\n    pressure: \"\",\r\n    humdity: \"\",\r\n    dateTime: null,\r\n    err: false,\r\n  }\r\n\r\n\r\n\r\n  handleInputChange = e => {\r\n    this.setState({\r\n      value: e.target.value,\r\n    })\r\n  }\r\n\r\n  handleCitySubmit = e => {\r\n    e.preventDefault();\r\n    const API = `https://api.apixu.com/v1/current.json?key=b6759fc0f17e46ce88d221527190407&q=${this.state.value}`;\r\n    fetch(API)\r\n      .then(response => {\r\n        if (response.ok) {\r\n          return response\r\n        }\r\n        throw Error(`Nie mamy w bazie miasta ${this.state.city}`)\r\n      })\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        console.log(data)\r\n        const time = new Date().toLocaleString()\r\n        const { temp_c, feelslike_c, wind_kph, pressure_mb, humidity, is_day } = data.current;\r\n        this.setState(prevState => ({\r\n          err: false,\r\n          date: time,\r\n          city: prevState.value,\r\n          temp: temp_c,\r\n          feelTemp: feelslike_c,\r\n          wind: wind_kph,\r\n          pressure: pressure_mb,\r\n          humdity: humidity,\r\n          dayTime: is_day,\r\n        }))\r\n\r\n      })\r\n      .catch(err => {\r\n        // console.log(err)\r\n        this.setState(prevState => ({\r\n          err: true,\r\n          city: prevState.value,\r\n        }))\r\n      })\r\n  }\r\n\r\n  render() {\r\n    if (!this.state.condition) {\r\n      document.body.className = \"night\"\r\n    } else {\r\n      document.body.className = \"day\"\r\n    }\r\n    return (\r\n      <div className=\"app\">\r\n        <Form\r\n          value={this.state.value}\r\n          inputChange={this.handleInputChange}\r\n          submit={this.handleCitySubmit}\r\n        />\r\n        <Result\r\n          weather={this.state}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}